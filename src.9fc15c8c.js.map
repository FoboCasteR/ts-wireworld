{"version":3,"sources":["src/cellState.ts","src/gameLoop.ts","src/gameBoard.ts","src/wireWorld.ts","src/renderer.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.9fc15c8c.js","sourceRoot":"..","sourcesContent":["export const enum CellState {\n  Empty = 0,\n  Head = 1,\n  Tail = 2,\n  Conductor = 3\n}\n","import { WireWorld } from './wireWorld';\nimport { Renderer } from './renderer';\n\nexport class GameLoop {\n  static msPerFrame = 16;\n  private isRunned = false;\n  private requestId: number;\n  private lastTickTs: number;\n\n  constructor(private game: WireWorld, private renderer: Renderer) {}\n\n  start(): void {\n    this.isRunned = true;\n    this.lastTickTs = Date.now();\n    this.requestId = window.requestAnimationFrame(this.boundTick);\n  }\n\n  stop(): void {\n    this.isRunned = false;\n    window.cancelAnimationFrame(this.requestId);\n  }\n\n  toggle(): void {\n    if (this.isRunned) {\n      this.stop();\n    } else {\n      this.start();\n    }\n  }\n\n  tick(): void {\n    const currentTickTs = Date.now();\n    const elapsedTime = currentTickTs - this.lastTickTs;\n\n    if (elapsedTime >= GameLoop.msPerFrame) {\n      this.game.update();\n      this.renderer.render(this.game.getBoard());\n      this.lastTickTs = currentTickTs;\n    }\n\n    if (this.isRunned) {\n      this.requestId = window.requestAnimationFrame(this.boundTick);\n    }\n  }\n\n  private boundTick = (): void => {\n    this.tick();\n  };\n}\n","import { CellState } from './cellState';\n\nexport class GameBoard {\n  private data: CellState[][];\n\n  constructor(readonly width: number, readonly height: number) {\n    this.data = new Array(height);\n    for (let y = 0; y < height; y++) {\n      this.data[y] = new Array(width).fill(CellState.Empty);\n    }\n  }\n\n  countElectrons(x: number, y: number): number {\n    const { data, height, width } = this;\n    const checkTop = y !== 0;\n    const checkBottom = y < height - 1;\n    const checkLeft = x !== 0;\n    const checkRight = x < width - 1;\n\n    let counter = 0;\n\n    if (checkTop) {\n      const row = data[y - 1];\n      counter += this.isElectron(row[x]);\n      if (checkLeft) counter += this.isElectron(row[x - 1]);\n      if (checkRight) counter += this.isElectron(row[x + 1]);\n    }\n    if (checkBottom) {\n      const row = data[y + 1];\n      counter += this.isElectron(row[x]);\n      if (checkLeft) counter += this.isElectron(row[x - 1]);\n      if (checkRight) counter += this.isElectron(row[x + 1]);\n    }\n    if (checkLeft) counter += this.isElectron(data[y][x - 1]);\n    if (checkRight) counter += this.isElectron(data[y][x + 1]);\n\n    return counter;\n  }\n\n  getState(x: number, y: number): CellState {\n    return this.data[y][x];\n  }\n\n  setState(x: number, y: number, state: CellState): void {\n    this.data[y][x] = state;\n  }\n\n  private isElectron(state: CellState): number {\n    return state === CellState.Head ? 1 : 0;\n  }\n}\n","import { CellState } from './cellState';\nimport { GameBoard } from './gameBoard';\n\nexport class WireWorld {\n  private primaryBoard: GameBoard;\n  private secondaryBoard: GameBoard;\n\n  constructor(width: number, height: number) {\n    this.primaryBoard = new GameBoard(width, height);\n    this.secondaryBoard = new GameBoard(width, height);\n  }\n\n  update(): this {\n    const { primaryBoard: board, secondaryBoard: nextBoard } = this;\n\n    for (let x = 0; x < board.width; x++) {\n      for (let y = 0; y < board.height; y++) {\n\n        switch (board.getState(x, y)) {\n          case CellState.Conductor:\n            const electrons = board.countElectrons(x, y);\n\n            if (electrons === 1 || electrons === 2) {\n              nextBoard.setState(x, y, CellState.Head);\n            } else {\n              nextBoard.setState(x, y, CellState.Conductor);\n            }\n\n            break;\n          case CellState.Head:\n            nextBoard.setState(x, y, CellState.Tail);\n            break;\n          case CellState.Tail:\n            nextBoard.setState(x, y, CellState.Conductor);\n            break;\n          case CellState.Empty:\n            nextBoard.setState(x, y, CellState.Empty);\n            break;\n        }\n      }\n    }\n\n    this.primaryBoard = nextBoard;\n    this.secondaryBoard = board;\n\n    return this;\n  }\n\n  getBoard(): GameBoard {\n    return this.primaryBoard;\n  }\n}\n","import { CellState } from './cellState';\nimport { GameBoard } from './gameBoard';\n\nexport class Renderer {\n  private ctx: CanvasRenderingContext2D;\n\n  constructor(canvas: HTMLCanvasElement, options: {scale?: number}) {\n    const ctx = canvas.getContext('2d');\n\n    ctx.scale(options.scale, options.scale);\n    ctx.imageSmoothingEnabled = false;\n\n    this.ctx = ctx;\n  }\n\n  render(gameBoard: GameBoard): void {\n    const imageData = this.ctx.getImageData(\n      0,\n      0,\n      gameBoard.width,\n      gameBoard.height\n    );\n\n    const buffer = new ArrayBuffer(imageData.data.length);\n    const pixels = new Uint32Array(buffer);\n\n    for (let y = 0; y < gameBoard.height; y++) {\n      for (let x = 0; x < gameBoard.width; x++) {\n        const index = y * gameBoard.width + x;\n\n        switch (gameBoard.getState(x, y)) {\n          case CellState.Head:\n            pixels[index] = 0xffff0000;\n            break;\n          case CellState.Tail:\n            pixels[index] = 0xff0000ff;\n            break;\n          case CellState.Conductor:\n            pixels[index] = 0xff00ffff;\n            break;\n          default:\n            pixels[index] = 0xff000000;\n        }\n      }\n    }\n\n    imageData.data.set(new Uint8ClampedArray(buffer));\n\n    this.ctx.putImageData(imageData, 0, 0);\n    this.ctx.drawImage(this.ctx.canvas, 0, 0);\n  }\n}\n","import { CellState } from './cellState';\nimport { GameBoard } from './gameBoard';\nimport { GameLoop } from './gameLoop';\nimport { WireWorld } from './wireWorld';\nimport { Renderer } from './renderer';\n\nfunction example(board: GameBoard) {\n  for (let x = 0; x < board.width; x++) {\n    board.setState(x, board.height / 2, CellState.Conductor);\n  }\n\n  board.setState(board.width / 2, board.height / 2, CellState.Head);\n  board.setState(board.width / 2 - 1, board.height / 2, CellState.Tail);\n}\n\nwindow.addEventListener('DOMContentLoaded', function () {\n  const WIDTH = 500;\n  const HEIGHT = 500;\n  const SCALE = 10;\n\n  const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n  canvas.height = HEIGHT;\n  canvas.width = WIDTH;\n\n  const renderer = new Renderer(canvas, {scale: 10});\n  const game = new WireWorld(WIDTH / SCALE, HEIGHT / SCALE);\n\n  example(game.getBoard());\n  renderer.render(game.getBoard());\n\n  const loop = new GameLoop(game, renderer);\n\n  document.getElementById('toggle-button').onclick = function () {\n    loop.toggle();\n  };\n\n  document.getElementById('step-button').onclick = function () {\n    loop.stop();\n    game.update();\n    renderer.render(game.getBoard());\n  };\n\n  document.getElementById('restart-button').onclick = function () {\n    example(game.getBoard());\n    renderer.render(game.getBoard());\n  };\n\n  canvas.addEventListener('mousedown', function (event) {\n    const {x, y, button} = event;\n    const boardX = Math.floor(x / SCALE) - 1;\n    const boardY = Math.floor(y / SCALE) - 1;\n    const board = game.getBoard();\n    const currentState = board.getState(boardX, boardY);\n\n    if (button === 0) {\n      switch (currentState) {\n        case CellState.Conductor:\n          board.setState(boardX, boardY, CellState.Empty);\n          break;\n        case CellState.Empty:\n          board.setState(boardX, boardY, CellState.Conductor);\n          break;\n      }\n    }\n\n    if (button === 2) {\n      switch (currentState) {\n        case CellState.Conductor:\n          board.setState(boardX, boardY, CellState.Head);\n          break;\n        case CellState.Head:\n          board.setState(boardX, boardY, CellState.Tail);\n          break;\n        case CellState.Tail:\n          board.setState(boardX, boardY, CellState.Conductor);\n          break;\n      }\n    }\n\n    renderer.render(game.getBoard());\n  });\n\n  canvas.addEventListener('contextmenu', function (event) {\n    event.preventDefault();\n  });\n});\n"]}